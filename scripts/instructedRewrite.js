import { getContext, extension_settings } from \'../../../../extensions.js\';\nimport { executeSTScript } from \'../../../scriptUtils.js\';\nimport { extensionName, getPreviousImpersonateInput, setPreviousImpersonateInput } from \'../../index.js\';\n\n/**\n * Handles the Instructed Rewrite action.\n * Gets the user\'s instruction input, finds the last message, \n * and uses STScript to edit the last message based on the instruction.\n */\nexport default async function instructedRewrite() {\n    const context = getContext();\n    const settings = extension_settings[extensionName];\n    const inputElement = document.getElementById(\'send_textarea\');\n    const instructionInput = inputElement?.value?.trim() ?? \'\';\n\n    if (!instructionInput) {\n        toastr.warning(\'Please enter instructions in the text box to guide the rewrite.\');\n        return;\n    }\n\n    // Find the last message that is not from the user\n    const lastMessageIndex = context.chat?.findLastIndex(m => !m.is_user);\n    if (lastMessageIndex === -1 || lastMessageIndex === undefined) {\n        toastr.warning(\'Could not find a previous message to rewrite.\');\n        return;\n    }\n    const lastMessageSwipeIndex = context.chat[lastMessageIndex]?.swipe_id ?? 0;\n    const targetMesId = context.chat[lastMessageIndex]?.mesid ?? null;\n\n    if (targetMesId === null) {\n         toastr.error(\'Error: Could not get the ID of the message to rewrite.\');\n        return;\n    }\n\n    console.log(`${extensionName}: Rewriting message ID ${targetMesId} (Swipe ${lastMessageSwipeIndex}) with instruction: \"${instructionInput}\"`);\n\n    const originalInput = inputElement.value; // Store original user input before potentially modifying\n    setPreviousImpersonateInput(originalInput); // Save for recovery\n\n    let presetToUse = settings.presetInstructedRewrite;\n    let originalPreset = null;\n    let stCommand = \'\';\n\n    try {\n        // 1. Handle Preset Switching (if a preset is specified)\n        if (presetToUse) {\n            const currentApi = context.globalSettings.API;\n            const currentPreset = context.globalSettings.presetSelected?.[currentApi];\n            if (currentPreset && currentPreset !== presetToUse) {\n                originalPreset = currentPreset; // Store the original preset name\n                stCommand += `/presetname value=\"${presetToUse}\" | `; // Switch preset\n                console.log(`${extensionName}: Switching to preset: ${presetToUse}`);\n            } else {\n                presetToUse = null; // Don\'t try to restore if it wasn\'t switched\n            }\n        }\n\n        // 2. Prepare the prompt using the override setting\n        // Ensure {{input}} is replaced correctly, escaping potentially problematic characters\n        const promptTemplate = settings.promptInstructedRewrite || \'[Rewrite the last message according to these instructions: {{input}}]\'; // Fallback just in case\n        const escapedInstruction = instructionInput.replace(/\\|/g, \'\\\\|\').replace(/`/g, \'\\\\`\'); // Escape pipes and backticks for STScript\n        const finalPrompt = promptTemplate.replace(/\\{\\{input\\}\\}/g, escapedInstruction);\n        const escapedFinalPrompt = finalPrompt.replace(/`/g, \'\\\\`\'); // Escape backticks again just to be safe\n\n        // 3. Build the STScript command to inject context and edit the target message\n        // We navigate to the correct message/swipe first, inject context, then edit.\n        stCommand += `/navigateto mesid=${targetMesId} swipeid=${lastMessageSwipeIndex} | `;\n        stCommand += `/inject content=\`${escapedFinalPrompt}\` role=\"system\" is_ephemeral=true | `;\n        stCommand += \'/edit await=true\'; // Use /edit to modify the navigated message\n\n        console.log(`${extensionName}: Executing STScript: ${stCommand}`);\n        await executeSTScript(stCommand);\n\n        toastr.success(\'Rewrite generated.\');\n\n    } catch (error) {\n        console.error(`${extensionName}: Error during instructed rewrite:`, error);\n        toastr.error(`Error generating rewrite: ${error}`);\n    } finally {\n        // 4. Restore Preset (if it was changed)\n        if (originalPreset) {\n            try {\n                const restorePresetCommand = `/presetname value=\"${originalPreset}\"`;\n                await executeSTScript(restorePresetCommand);\n                console.log(`${extensionName}: Restored original preset: ${originalPreset}`);\n            } catch (presetError) {\n                console.error(`${extensionName}: Failed to restore preset:`, presetError);\n            }\n        }\n        // 5. Restore original input to the textarea (important!)\n        if (inputElement) {\n            const recoveredInput = getPreviousImpersonateInput();\n            inputElement.value = recoveredInput;\n            // Adjust textarea height after changing value\n            inputElement.style.height = \'\';\n            inputElement.style.height = inputElement.scrollHeight + \'px\';\n            console.log(`${extensionName}: Restored original input to textarea.`);\n        }\n    }\n}\n 